// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  name           String?
  passwordHash   String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  projects       Project[]
  folders        Folder[]           @relation("FolderOwner")
  createdDiagrams Diagram[]         @relation("DiagramCreatedBy")
  updatedDiagrams Diagram[]         @relation("DiagramUpdatedBy")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  owner       User     @relation(fields: [ownerId], references: [id])
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  folders     Folder[]
  diagrams    Diagram[]

  @@index([ownerId])
}

model Folder {
  id           String   @id @default(cuid())
  name         String
  project      Project  @relation(fields: [projectId], references: [id])
  projectId    String
  parent       Folder?  @relation("FolderHierarchy", fields: [parentId], references: [id])
  parentId     String?
  children     Folder[] @relation("FolderHierarchy")
  diagrams     Diagram[]
  createdBy    User     @relation("FolderOwner", fields: [createdById], references: [id])
  createdById  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([projectId, parentId])
  @@unique([projectId, parentId, name])
}

model Diagram {
  id            String         @id @default(cuid())
  name          String
  engine        DiagramEngine
  category      String?
  content       String
  renderedSvg   String?
  project       Project        @relation(fields: [projectId], references: [id])
  projectId     String
  folder        Folder?        @relation(fields: [folderId], references: [id])
  folderId      String?
  createdBy     User           @relation("DiagramCreatedBy", fields: [createdById], references: [id])
  createdById   String
  updatedBy     User?          @relation("DiagramUpdatedBy", fields: [updatedById], references: [id])
  updatedById   String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([projectId, folderId])
  @@unique([projectId, folderId, name])
}

enum DiagramEngine {
  MERMAID
  PLANTUML
  CUSTOM
}